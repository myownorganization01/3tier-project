pipeline {
    agent any
    tools {
        nodejs 'nodejs24'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Git checkout') {
            steps {
                git branch: 'dev', url: 'https://github.com/myownorganization01/3tier-project.git'
            }
        }
        stage('Frontend compilation') {
            steps {
                dir('client') {
                    sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        stage('Backend Compilation') {
            steps {
                dir('api') {
                    sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        stage('Gitleaks scan') {
            steps {
                sh 'gitleaks detect --source ./client --exit-code 1'
                sh 'gitleaks detect --source ./api --exit-code 1'
            }
        }
        stage('Sonarqube analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh "${tool 'sonar-scanner'}/bin/sonar-scanner -Dsonar.projectName=NodeJS-Project -Dsonar.projectKey=NodeJS-Project"
                }
            }
        }
        stage('Quality Gate check') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        try {
                            waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                        } catch (Exception e) {
                            echo "Quality Gate not ready yet, continue pipeline"
                        }
                    }
                }
            }
        }
        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }
        
        stage('build and push backend image ') {
            steps {
                script {
                withDockerRegistry(credentialsId: 'myapp') {
                    dir('api') {
                sh 'docker system prune -f || true'
               sh 'docker build -t mohamedgharbii/backendimage:latest .'
               sh 'trivy image --format table -o backendimagereport.txt mohamedgharbii/backendimage:latest '
                sh 'docker push mohamedgharbii/backendimage:latest'
}
   }
            }
        }
            
        }
             stage('build and push frontend image ') {
            steps {
                script {
                withDockerRegistry(credentialsId: 'myapp') {
                    dir('client') {
                sh 'docker system prune -f || true'
               sh 'docker build --no-cache -t mohamedgharbii/frontendimage:latest .'
               sh 'trivy image --format table -o frontendimagereport.txt mohamedgharbii/frontendimage:latest '
                sh 'docker push mohamedgharbii/frontendimage:latest'
}
   }
            }
        }
             }
           stage('k8-deploy-to-dev') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: 'https://F51F33F3A98043EAC3A885170C254F33.yl4.eu-north-1.eks.amazonaws.com') {
               sh 'kubectl apply -f k8s-dev/sc.yaml -n dev --validate=false'
                sh 'kubectl apply -f k8s-dev/mysql.yaml -n dev --validate=false'
                sh 'kubectl apply -f k8s-dev/backend.yaml -n dev --validate=false'
                 sh 'kubectl apply -f k8s-dev/frontend.yaml -n dev --validate=false'
                 sh 'kubectl rollout restart deployment/frontend -n dev --validate=false'
                  sleep 30
}
            }
        }
        stage('verify-K8-deploy') {
            steps {
                script {
                     withKubeConfig(caCertificate: '', clusterName: 'devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: 'https://F51F33F3A98043EAC3A885170C254F33.yl4.eu-north-1.eks.amazonaws.com'){
                            sh 'kubectl get pods -n dev'
                            sh 'kubectl get svc -n dev'
                            
                        }
                }
            }
        }
        
    }
}
